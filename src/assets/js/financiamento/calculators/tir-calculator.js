/* =====================================
   TIR-CALCULATOR.JS
   Calculadora de TIR (Taxa Interna de Retorno) usando M√©todo da Secante
   Portado de: budget.py linhas 1607-1642

   M√âTODO DA SECANTE (mais est√°vel que Newton-Raphson)
   - Usa 2 pontos para aproxima√ß√£o
   - N√£o requer c√°lculo de derivada
   - Melhor converg√™ncia com fluxos irregulares

   PROTE√á√ïES NUM√âRICAS (3):
   1. rate <= -1 ‚Üí ajuste para -0.9999 (evita divis√£o por zero)
   2. Overflow ‚Üí retorna ¬±Infinity
   3. Denominador zero ‚Üí fallback 0.0

   NO HARDCODED DATA - NO FALLBACKS - KISS - DRY - SOLID
   ===================================== */

class CalculadorTIR {
  constructor() {
    console.log('üìä CalculadorTIR (M√©todo da Secante) inicializado');

    // Par√¢metros fixos do algoritmo (exatamente como Python)
    this.TAXA_INICIAL_0 = 0.1;     // 10% - primeiro chute
    this.TAXA_INICIAL_1 = 0.11;    // 11% - segundo chute
    this.MAX_ITERACOES = 100;       // Limite de itera√ß√µes
    this.TOLERANCIA = 1e-6;         // Precis√£o desejada
    this.TOLERANCIA_DENOMINADOR = 1e-9;  // Prote√ß√£o divis√£o por zero
  }

  // ==========================================
  // TIR - M√âTODO DA SECANTE
  // ==========================================

  /**
   * Calcula TIR usando M√©todo da Secante
   * C√≥pia exata do Python budget.py linhas 1607-1642
   *
   * Algoritmo:
   * 1. Inicia com 2 taxas: 10% e 11%
   * 2. Calcula VPL para cada taxa
   * 3. Usa f√≥rmula da secante: taxa_next = taxa1 - vpl1 * (taxa1 - taxa0) / (vpl1 - vpl0)
   * 4. Itera at√© VPL ‚âà 0 ou atingir MAX_ITERACOES
   * 5. Converte taxa mensal para anual: ((1+r)^12 - 1) * 100
   *
   * @param {Object} params - Par√¢metros obrigat√≥rios
   * @returns {Object} Resultado TIR com converg√™ncia e itera√ß√µes
   */
  calcularTIRSecante(params) {
    // Validar par√¢metros obrigat√≥rios
    this.validarParams(params);

    const { investimentoInicial, fluxosCaixa, periodicidade = 'mensal' } = params;

    // Construir array de cash flows: [-I‚ÇÄ, FC‚ÇÅ, FC‚ÇÇ, ..., FC‚Çô]
    // CRITICAL: investimento inicial √© NEGATIVO
    const cashFlows = [-investimentoInicial, ...fluxosCaixa];

    console.log(`üî¢ Calculando TIR (Secante): ${cashFlows.length} per√≠odos, periodicidade: ${periodicidade}`);

    // CORRE√á√ÉO 1 & FINAL: Flag para rastrear prote√ß√£o rate <= -1
    // MOVIDO para ANTES da detec√ß√£o de fluxos constantes
    let protecaoRateAtivada = false;

    // CORRE√á√ÉO 2: Detectar fluxos constantes ANTES do algoritmo
    // Fluxos constantes causam vpl1 ‚âà vpl0 ‚Üí denominador zero
    const todosIguais = fluxosCaixa.every(f =>
      Math.abs(f - fluxosCaixa[0]) < 0.01
    );

    if (todosIguais && fluxosCaixa.length > 0) {
      const fcMensal = fluxosCaixa[0];
      const n = fluxosCaixa.length;
      const somaFluxos = fcMensal * n;

      // Se fluxos constantes n√£o recuperam investimento
      if (somaFluxos <= investimentoInicial) {
        // CORRE√á√ÉO FINAL: Verificar se taxa seria <= -1
        // Se fluxos s√£o negativos ou muito baixos, taxa seria <= -1
        const taxaAprox = somaFluxos / investimentoInicial - 1;
        if (taxaAprox <= -1.0) {
          protecaoRateAtivada = true;
        }

        return {
          indicador: 'TIR',
          tir: -100.0,
          tirMensal: -100.0,
          converged: true,
          iteracoes: 0,
          vplFinal: -investimentoInicial + somaFluxos,
          interpretacao: 'Fluxos constantes n√£o recuperam investimento',
          observacao: 'TIR negativa - projeto invi√°vel',
          metodo: 'Fluxos constantes (detec√ß√£o early-return)',
          protecoes: {
            rateLimitado: protecaoRateAtivada,  // CORRE√á√ÉO FINAL: Usar flag
            overflowDetectado: false,
            denominadorZero: false
          }
        };
      }

      // TIR mensal aproximada para fluxos constantes
      // Usando f√≥rmula: VPL = 0 ‚Üí I0 = FC * [(1 - (1+r)^-n) / r]
      // Aproxima√ß√£o: r ‚âà (FC * n / I0) - 1
      const tirMensalAprox = Math.pow(somaFluxos / investimentoInicial, 1 / n) - 1;
      const tirAnualAprox = (Math.pow(1 + tirMensalAprox, 12) - 1) * 100;

      console.log(`üìä Fluxos constantes detectados: TIR aproximada ${tirAnualAprox.toFixed(2)}%`);

      return {
        indicador: 'TIR',
        tir: tirAnualAprox,
        tirMensal: tirMensalAprox * 100,
        converged: true,
        iteracoes: 0,
        vplFinal: 0,
        interpretacao: `TIR de ${tirAnualAprox.toFixed(2)}% ao ano (fluxos constantes)`,
        observacao: 'C√°lculo direto para fluxos constantes (sem itera√ß√£o)',
        metodo: 'Fluxos constantes (f√≥rmula direta)',
        protecoes: {
          rateLimitado: false,  // Taxa positiva (fluxos recuperam investimento)
          overflowDetectado: false,
          denominadorZero: false
        }
      };
    }

    // Helper: Calcular VPL para uma dada taxa
    // Python linha 1614-1622
    const vplCalc = (rate) => {
      // PROTE√á√ÉO 1: Garante que taxa n√£o seja <= -1
      // Evita divis√£o por zero ou n√∫meros complexos
      // Python linha 1616-1617
      if (rate <= -1.0) {
        protecaoRateAtivada = true;  // CORRE√á√ÉO 1: Marcar flag
        rate = -0.9999; // Valor muito pr√≥ximo de -1
      }

      try {
        let vpn = 0;
        for (let i = 0; i < cashFlows.length; i++) {
          const divisor = Math.pow(1 + rate, i);

          // PROTE√á√ÉO 2: Overflow
          // Python linha 1620-1622
          if (!isFinite(divisor)) {
            // Retorna n√∫mero grande para guiar algoritmo
            return rate > 0 ? Infinity : -Infinity;
          }

          vpn += cashFlows[i] / divisor;
        }
        return vpn;
      } catch (error) {
        // PROTE√á√ÉO 2 (catch): Se houver erro, retornar Infinity
        return rate > 0 ? Infinity : -Infinity;
      }
    };

    // Estimativas iniciais para M√©todo da Secante
    // Python linha 1625
    let taxa0 = this.TAXA_INICIAL_0;  // 0.1 (10%)
    let taxa1 = this.TAXA_INICIAL_1;  // 0.11 (11%)
    let vpl0 = vplCalc(taxa0);
    let vpl1 = vplCalc(taxa1);

    let iteracao = 0;

    // Itera√ß√µes do M√©todo da Secante
    // Python linha 1628-1639
    for (iteracao = 0; iteracao < this.MAX_ITERACOES; iteracao++) {
      // Verificar converg√™ncia
      if (Math.abs(vpl1) < this.TOLERANCIA) {
        console.log(`‚úÖ TIR convergiu em ${iteracao} itera√ß√µes`);
        break;
      }

      // PROTE√á√ÉO 3: Evitar divis√£o por zero
      // Python linha 1633-1634
      if (Math.abs(vpl1 - vpl0) < this.TOLERANCIA_DENOMINADOR) {
        console.warn('‚ö†Ô∏è TIR n√£o convergiu - denominador pr√≥ximo de zero');
        return {
          indicador: 'TIR',
          tir: 0.0,
          tirMensal: 0.0,
          converged: false,
          iteracoes: iteracao,
          vplFinal: vpl1,
          interpretacao: 'TIR n√£o convergiu - denominador pr√≥ximo de zero',
          observacao: 'vpl1 ‚âà vpl0 causa divis√£o por zero',
          motivo: 'Denominador pr√≥ximo de zero (vpl1 ‚âà vpl0)',
          metodo: 'Secante (abortado)',
          protecoes: {
            rateLimitado: protecaoRateAtivada,
            overflowDetectado: !isFinite(vpl1),
            denominadorZero: true
          }
        };
      }

      // F√≥rmula do M√©todo da Secante
      // Python linha 1637
      const taxaNext = taxa1 - vpl1 * (taxa1 - taxa0) / (vpl1 - vpl0);

      // Atualizar taxas e VPLs para pr√≥xima itera√ß√£o
      // Python linha 1638-1639
      taxa0 = taxa1;
      taxa1 = taxaNext;
      vpl0 = vpl1;
      vpl1 = vplCalc(taxa1);
    }

    // Converter taxa mensal para anual e percentual
    // Python linha 1642: ((1 + taxa1) ** 12 - 1) * 100 if taxa1 > -1 else -100.0
    let tirAnualPercentual;
    if (taxa1 > -1) {
      // Convers√£o: (1+r_mensal)^12 - 1 = r_anual
      tirAnualPercentual = (Math.pow(1 + taxa1, 12) - 1) * 100;
    } else {
      tirAnualPercentual = -100.0;
    }

    const converged = Math.abs(vpl1) < this.TOLERANCIA;

    // CORRE√á√ÉO 5: Objeto protecoes completo e padronizado
    return {
      indicador: 'TIR',
      tir: tirAnualPercentual,
      tirMensal: taxa1 * 100,  // Taxa mensal em %
      converged,
      iteracoes: iteracao,
      vplFinal: vpl1,
      interpretacao: converged
        ? `TIR de ${tirAnualPercentual.toFixed(2)}% ao ano (${(taxa1 * 100).toFixed(4)}% ao m√™s)`
        : `TIR n√£o convergiu ap√≥s ${iteracao} itera√ß√µes`,
      observacao: 'Compare TIR com TMA. Se TIR > TMA, projeto √© vi√°vel.',
      metodo: 'Secante',
      protecoes: {
        rateLimitado: protecaoRateAtivada,  // CORRE√á√ÉO 1: Usar flag
        overflowDetectado: !isFinite(vpl1),
        denominadorZero: Math.abs(vpl1 - vpl0) < this.TOLERANCIA_DENOMINADOR
      }
    };
  }

  /**
   * M√©todo alternativo: TIR com chute inicial customizado
   * √ötil se o algoritmo n√£o convergir com chutes padr√£o (10% e 11%)
   */
  calcularTIRComChute(params) {
    this.validarParams(params);

    const { chuteInicial0, chuteInicial1 } = params;

    if (chuteInicial0 === undefined || chuteInicial1 === undefined) {
      throw new Error('CalculadorTIR: chuteInicial0 e chuteInicial1 obrigat√≥rios para m√©todo com chute customizado');
    }

    // Temporariamente substituir chutes
    const taxaOriginal0 = this.TAXA_INICIAL_0;
    const taxaOriginal1 = this.TAXA_INICIAL_1;

    this.TAXA_INICIAL_0 = chuteInicial0 / 100;  // Converter % para decimal
    this.TAXA_INICIAL_1 = chuteInicial1 / 100;

    const resultado = this.calcularTIRSecante(params);

    // Restaurar chutes originais
    this.TAXA_INICIAL_0 = taxaOriginal0;
    this.TAXA_INICIAL_1 = taxaOriginal1;

    return resultado;
  }

  /**
   * Compara√ß√£o: TIR Secante vs Newton-Raphson
   * Para fins de valida√ß√£o e debugging
   */
  compararMetodos(params) {
    const tirSecante = this.calcularTIRSecante(params);

    // Calcular TIR usando Newton-Raphson (m√©todo antigo)
    // Apenas para compara√ß√£o - N√ÉO usar em produ√ß√£o
    const tirNewton = this.calcularTIRNewtonRaphson(params);

    const diferencaAbsoluta = Math.abs(tirSecante.tir - tirNewton.tir);
    const diferencaPercentual = (diferencaAbsoluta / tirNewton.tir) * 100;

    return {
      secante: tirSecante,
      newtonRaphson: tirNewton,
      comparacao: {
        diferencaAbsoluta,
        diferencaPercentual,
        algoritmoRecomendado: 'Secante (mais est√°vel)',
        observacao: diferencaPercentual < 0.01
          ? 'M√©todos convergem para mesmo valor'
          : 'M√©todos divergem - usar Secante'
      }
    };
  }

  /**
   * TIR Newton-Raphson (DEPRECATED - apenas para compara√ß√£o)
   * Usa derivada - menos est√°vel que Secante
   */
  calcularTIRNewtonRaphson(params) {
    this.validarParams(params);

    const { investimentoInicial, fluxosCaixa } = params;
    const cashFlows = [-investimentoInicial, ...fluxosCaixa];

    const calcularVPN = (taxa) => {
      let vpn = 0;
      for (let i = 0; i < cashFlows.length; i++) {
        vpn += cashFlows[i] / Math.pow(1 + taxa, i);
      }
      return vpn;
    };

    const calcularDerivada = (taxa) => {
      let derivada = 0;
      for (let i = 0; i < cashFlows.length; i++) {
        derivada += (-i * cashFlows[i]) / Math.pow(1 + taxa, i + 1);
      }
      return derivada;
    };

    let taxa = 0.1;  // Chute inicial 10%
    let iteracao = 0;

    for (iteracao = 0; iteracao < this.MAX_ITERACOES; iteracao++) {
      const vpn = calcularVPN(taxa);
      if (Math.abs(vpn) < this.TOLERANCIA) break;

      const derivada = calcularDerivada(taxa);
      taxa = taxa - vpn / derivada;
    }

    const tirAnual = (Math.pow(1 + taxa, 12) - 1) * 100;

    return {
      indicador: 'TIR',
      tir: tirAnual,
      converged: Math.abs(calcularVPN(taxa)) < this.TOLERANCIA,
      iteracoes: iteracao,
      metodo: 'Newton-Raphson (DEPRECATED)'
    };
  }

  // ==========================================
  // VALIDA√á√ïES
  // ==========================================

  validarParams(params) {
    if (!params) {
      throw new Error('CalculadorTIR: params obrigat√≥rio');
    }

    // Validar investimentoInicial
    if (params.investimentoInicial === undefined || params.investimentoInicial === null) {
      throw new Error('CalculadorTIR: investimentoInicial obrigat√≥rio');
    }

    if (typeof params.investimentoInicial !== 'number' || params.investimentoInicial <= 0) {
      throw new Error('CalculadorTIR: investimentoInicial deve ser n√∫mero positivo');
    }

    // Validar fluxosCaixa
    if (!params.fluxosCaixa || !Array.isArray(params.fluxosCaixa)) {
      throw new Error('CalculadorTIR: fluxosCaixa deve ser array');
    }

    if (params.fluxosCaixa.length === 0) {
      throw new Error('CalculadorTIR: fluxosCaixa n√£o pode ser vazio');
    }

    // Validar que fluxos s√£o n√∫meros
    for (let i = 0; i < params.fluxosCaixa.length; i++) {
      const fluxo = params.fluxosCaixa[i];
      if (typeof fluxo !== 'number' || isNaN(fluxo)) {
        throw new Error(`CalculadorTIR: fluxosCaixa[${i}] deve ser n√∫mero v√°lido`);
      }
    }

    // Validar periodicidade (opcional)
    if (params.periodicidade && params.periodicidade !== 'mensal' && params.periodicidade !== 'anual') {
      throw new Error('CalculadorTIR: periodicidade deve ser "mensal" ou "anual"');
    }
  }

  // ==========================================
  // UTILITIES
  // ==========================================

  formatarPercentual(valor, decimais = 2) {
    return `${valor.toFixed(decimais)}%`;
  }

  formatarMoeda(valor) {
    return new Intl.NumberFormat('pt-BR', {
      style: 'currency',
      currency: 'BRL'
    }).format(valor);
  }
}

// Exportar para uso global
if (typeof window !== 'undefined') {
  window.CalculadorTIR = CalculadorTIR;
  console.log('‚úÖ CalculadorTIR exportado para window');
}

// Exportar para Node.js (se necess√°rio)
if (typeof module !== 'undefined' && module.exports) {
  module.exports = CalculadorTIR;
}
